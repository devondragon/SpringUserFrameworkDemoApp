plugins {
  id 'java'
  id 'org.springframework.boot' version '3.5.6'
  id 'io.spring.dependency-management' version '1.1.7'
  id "com.github.ben-manes.versions" version "0.52.0"

}

group = 'com.digitalsanctuary.springuser.demo'
version = '1.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// Define the configurations used in the project
configurations {
    developmentOnly
    runtimeOnly {
        extendsFrom developmentOnly
    }
    testImplementation {
        extendsFrom runtimeOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
	dev
}

repositories {
    mavenLocal()
	mavenCentral()
}



dependencies {
    // DigitalSanctuary Spring User Framework
    implementation 'com.digitalsanctuary:ds-spring-user-framework:3.5.1'
l
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Thymeleaf extras
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.3.RELEASE'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.4.0'

    // OpenAPI (Swagger)
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'

    // Runtime dependencies
    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.5.5'
    runtimeOnly 'org.postgresql:postgresql'

    // Utility libraries
    implementation 'org.passay:passay:1.6.6'
    implementation 'com.google.guava:guava:33.4.8-jre'
    implementation 'jakarta.validation:jakarta.validation-api:3.1.1'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.2.Final'

    // Compile-only dependencies
    compileOnly 'org.projectlombok:lombok'

    // Annotation processors
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    // Testing dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2:2.3.232'
    testImplementation 'com.codeborne:selenide:7.10.0'
    testImplementation 'io.github.bonigarcia:webdrivermanager:6.3.1'

    // OAuth2 Testing dependencies
    testImplementation 'com.github.tomakehurst:wiremock-jre8-standalone:3.0.1'
    testImplementation 'io.jsonwebtoken:jjwt-api:0.13.0'
    testRuntimeOnly 'io.jsonwebtoken:jjwt-impl:0.13.0'
    testRuntimeOnly 'io.jsonwebtoken:jjwt-jackson:0.13.0'
}

test {
	useJUnitPlatform {
          excludeTags 'ui'
    }
	  testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        // showStandardStreams = true         // Display log output

    }
}

tasks.register('uiTest', Test) {
    useJUnitPlatform {
        includeTags 'ui'
    }
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    shouldRunAfter test
}


bootJar {
	launchScript {
		properties 'confFolder': '/opt/app/conf/'
	}
}

bootRun {
	// Use Spring Boot DevTool only when we run Gradle bootRun task
	classpath = sourceSets.main.runtimeClasspath + configurations.developmentOnly
    sourceResources sourceSets.main
	if (project.hasProperty('profiles')) {
		environment SPRING_PROFILES_ACTIVE: profiles
	} else {
		def profiles = 'local'
		environment SPRING_PROFILES_ACTIVE: profiles
	}
}
